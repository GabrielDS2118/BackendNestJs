Trabajar en terminal de Git

Introduccion

    Primer proyecto con NestJs:

        Version node -> node --version
        npm i -g @nestjs/cli
        nest --version
        nest --help

        Crear proyecto -> nest new ecommerce-platzi
            Wich package manager -> npm
        
        Iniciar proyecto:
            cd ecommerce-platzi
            npm run start
            http://localhost:3000/ -> Hello World


3.Estructura de aplicaciones en NestJs

    Aplicaciones y carpetas de NestJS
    De arriba hacia abajo:

    1. Node_modules:
        Todo proyecto de Javascript posee este directorio donde se almacenan las librerías y dependencias que se descarguen con NPM.

    2. SRC:
        Directorio principal del proyecto donde encontramos:

        app.controller.spec.ts: archivo de pruebas unitarias del controlador con el mismo nombre.
        app.controller.ts: controlador que contiene endpoints a diferentes recursos.
        app.module.ts: módulo principal de toda la aplicación NestJS.
        app.service.ts: servicio consumido por los controladores para determinados propósitos.
        main.ts: archivo Core de la aplicación NestJS donde se realizan configuraciones e imports básicos para su funcionamiento.

    3. Test:
        Directorio de pruebas unitarias y de integración. NestJS utiliza por defecto Jest para escribir las pruebas.

        .editorconfig: este archivo no viene por defecto, pero se recomienda crearlo e instalar el plugin con el mismo nombre en el editor. Permite autoformatear los archivos, espacios, indentación, etc.
        .eslintrc.js: permite la configuración de un analizador de código para detectar tempranamente errores y resolverlos. Requiere instalación de un plugin en el editor.
        .gitignore: indicarle a GIT qué archivos/directorios ignorar.
        .prettierrc: archivo de configuración para el autoformateo de código. Requiere instalación de un plugin en el editor.
        nest-cli.json: archivo con configuraciones de NestJS. Algunos plugins del framework requieren de configuraciones adicionales en este archivo.
        package-lock.json: describe las dependencias exactas que se generaron en la instalación del proyecto.
        package.json: archivo para el manejo de dependencias, scripts y metadatos relevantes para el proyecto.
        README.md: archivo markdown para la documentación del proyecto.
        tsconfig.build.json: archivo principal para la configuración de TypeScript.
        tsconfig.json: extensión con más configuraciones de TypeScript.


5.Repaso a TypeScript: tipos y POO

    NestJS utiliza TypeScript como lenguaje de programación y conocer sus características y qué le adiciona a Javascript te convertirá en un profesional más completo de esta tecnología.

    Qué es TypeScript
        TypeScript es un lenguaje de programación mantenido por Microsoft. En otras palabras, es un “superconjunto” de Javascript que le agrega tipado de datos y programación orientada a objetos.
        El código fuente escrito en TypeScript, se “transpila” a código Javascript que es el que finalmente entienden los intérpretes de Javascript como los navegadores web o NodeJS.

    Tipado de Datos con TypeScript
        Con Javascript puedes crear una variable del tipo String y posteriormente asignarle un valor del tipo Entero o Boolean. Esto es propenso a tener errores en tiempo de ejecución.
        TypeScript permite tipar los datos para que estos no cambien de tipo.
    
    POO con TypeScript
        Javascript permite el desarrollo de aplicaciones utilizando POO basada en Prototipos. Puedes tomar el Curso Básico de Programación Orientada a Objetos con JavaScript para entrar en más detalle.
        TypeScript llega para permitir escribir código utilizando los conceptos de la POO más fácilmente con clases, herencia, polimorfismo, etc.

    Archivo src/recap.ts para poner en practica estos conceptos