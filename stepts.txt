Trabajar en terminal de Git

Introduccion

    Primer proyecto con NestJs:

        Version node -> node --version
        npm i -g @nestjs/cli
        nest --version
        nest --help

        Crear proyecto -> nest new ecommerce-platzi
            Wich package manager -> npm
        
        Iniciar proyecto:
            cd ecommerce-platzi
            npm run start
            http://localhost:3000/ -> Hello World


3.Estructura de aplicaciones en NestJs

    Aplicaciones y carpetas de NestJS
    De arriba hacia abajo:

    1. Node_modules:
        Todo proyecto de Javascript posee este directorio donde se almacenan las librerías y dependencias que se descarguen con NPM.

    2. SRC:
        Directorio principal del proyecto donde encontramos:

        app.controller.spec.ts: archivo de pruebas unitarias del controlador con el mismo nombre.
        app.controller.ts: controlador que contiene endpoints a diferentes recursos.
        app.module.ts: módulo principal de toda la aplicación NestJS.
        app.service.ts: servicio consumido por los controladores para determinados propósitos.
        main.ts: archivo Core de la aplicación NestJS donde se realizan configuraciones e imports básicos para su funcionamiento.

    3. Test:
        Directorio de pruebas unitarias y de integración. NestJS utiliza por defecto Jest para escribir las pruebas.

        .editorconfig: este archivo no viene por defecto, pero se recomienda crearlo e instalar el plugin con el mismo nombre en el editor. Permite autoformatear los archivos, espacios, indentación, etc.
        .eslintrc.js: permite la configuración de un analizador de código para detectar tempranamente errores y resolverlos. Requiere instalación de un plugin en el editor.
        .gitignore: indicarle a GIT qué archivos/directorios ignorar.
        .prettierrc: archivo de configuración para el autoformateo de código. Requiere instalación de un plugin en el editor.
        nest-cli.json: archivo con configuraciones de NestJS. Algunos plugins del framework requieren de configuraciones adicionales en este archivo.
        package-lock.json: describe las dependencias exactas que se generaron en la instalación del proyecto.
        package.json: archivo para el manejo de dependencias, scripts y metadatos relevantes para el proyecto.
        README.md: archivo markdown para la documentación del proyecto.
        tsconfig.build.json: archivo principal para la configuración de TypeScript.
        tsconfig.json: extensión con más configuraciones de TypeScript.


5.Repaso a TypeScript: tipos y POO

    NestJS utiliza TypeScript como lenguaje de programación y conocer sus características y qué le adiciona a Javascript te convertirá en un profesional más completo de esta tecnología.

    Qué es TypeScript
        TypeScript es un lenguaje de programación mantenido por Microsoft. En otras palabras, es un “superconjunto” de Javascript que le agrega tipado de datos y programación orientada a objetos.
        El código fuente escrito en TypeScript, se “transpila” a código Javascript que es el que finalmente entienden los intérpretes de Javascript como los navegadores web o NodeJS.

    Tipado de Datos con TypeScript
        Con Javascript puedes crear una variable del tipo String y posteriormente asignarle un valor del tipo Entero o Boolean. Esto es propenso a tener errores en tiempo de ejecución.
        TypeScript permite tipar los datos para que estos no cambien de tipo.
    
    POO con TypeScript
        Javascript permite el desarrollo de aplicaciones utilizando POO basada en Prototipos. Puedes tomar el Curso Básico de Programación Orientada a Objetos con JavaScript para entrar en más detalle.
        TypeScript llega para permitir escribir código utilizando los conceptos de la POO más fácilmente con clases, herencia, polimorfismo, etc.

    Archivo src/recap.ts para poner en practica estos conceptos


REST API

    6-Introduccion a controladores

        Controladores:
            Reciben request, validan tipos y permisos
            Si todo esta bien se conecta a los servicios (responsables de la lógica y obtención de datos desde una BBDD que el controlador requiere)
        
        Correr la aplicacion en modo de desarrollo (guarda cambios sin necesisdad de volver a correr el servidor)
            ecommerce-platzi/
                npm run start:dev
        
        app.controller.ts: 
            Hacer endpoint 'nuevo'
    
    7 Get: Como recibir parametros

        app.controller.ts:
            :parametro
            Obtener parametro:
                @Param('nombreparametro') nombreparametro: string
    
    8. Get: Parametros Query

        Diferencia de Parámetros de Ruta y Parámetros de query
            Los parámetros de ruta se utilizan para IDs u otros identificadores obligatorios, 
            mientras que los parámetros de consulta se utilizan para aplicar filtros opcionales a una consulta. 
            Utilízalos apropiadamente en tus endpoints según tengas la necesidad

        app.controllers.ts:

            Endpoint 'products':
                Parametros Query -> limit , offset y brand
                Sin valores por defecto
                    http://localhost:3000/products?limit=20&offset=40&brand=nike
                Con valores por defecto
                    http://localhost:3000/products?brand=puma
                
            Sintax Parametros Query
                @Query('nombreparamquery') nombreparamquery: tipodedato 
                 @Query('nombreparamquery') nombreparamquery = valor  (Por defecto)
        

            Evitar el bloqueo de rutas:

                product/filter  (Ruta estatica primero)
                product/:productId (Ruta dinamica despues)

    9.Separacion de responsabilidades

        En app.controller.ts estamos manejando endpoints para categorias y productos
        Debemos separar responsabilidades

        Generar controladores desde la cli

            ecommerce-platzi/ 

                nest g controller controllers/products --flat
                nest g controller controllers/categories --flat

                Al ejecutar estos comando se modifica app.module.ts para agregar estos array 
                al array de controladores
        
        Organizar metodos

            categories.controller.ts y products.controller.ts

                Pasar todos los metodos de products y categories a sus respectivos controladores

                Nombres de los endpoints

                    @Controller('categories')
                    @Controller('products)
                    Todos los endpoints estarán precedidos por lo que esta entre los () del @Controller
                    No es necesario poner el eslash
        
        Crear los demas controladores
            ecommerce-platzi/
                nest g controller controllers/orders --flat
                nest g controller controllers/users --flat
                nest g controller controllers/customers --flat
                nest g controller controllers/brands --flat
        
    11.Qué es el método POST

        products.controller.ts

            Crear nuevo endpoint @Post()
            Cuerpo de la solicitud: @Body()
    
    12.Métodos PUT Y DELETE

    13. Códigos de estado
        @HttpCode(HttpStatus.NombreStatusCode)
        Al darle click derecho a HttpStatus > Go to Definition , se mostrará una lista de Status code
    

INTEGRIDAD DE DATOS

    14.Introducción a Servicios

        Servicios en NestJS:
            Son los que suelen tener la lógica del negocio y la conexión con la base de datos
            Un servicio tiene la responsabilidad de gestionar el trabajo con los datos de la aplicación, de modo que realiza las operaciones para obtener esos datos, modificarlos, etc
        
        Creacion de Servicios
            ecommerce-platzi/ -> nest g s services/products --flat
            En app.module.ts se agrega el ProductsService en el array de providers
        
        Analizar Servicios

            Decorador servicios -> @Injectable()

            entities/product.entity.ts 
                Crear schema para los productos

            products.service.ts
                Hacer un Array de tipo Product y agregar un producto de prueba

                Métodos: 
                    findAll() -> retorna el array de products, 
                    findOne() -> Con un id busca el producto, 
                    create() -> 
                        Guardar en el array un producto(payload), el cual se pasa como parametro
                        Generar id

    15.Implementando servicios en controladores

        product.services.ts 

            Método update(id,payload):

                Buscar el producto usando el metodo finOne()

                Si existe el producto:
                    Buscar el index del producto
                    En la posicion del producto remplazar lo que habia con lo que se envia en el payload
                    Retorna el producto actualizado

        products.controller.ts 
            Importar el ProductServices e incluirlo en el constructor
            En cada metodo del controlador llamar a los métodos del servicio

        Probar endpoints en insomnia
    
    16.Manejo de errores con throw y NotFoundException
